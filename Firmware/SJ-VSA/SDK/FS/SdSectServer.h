/****************************************Copyright (c)************************************************************
**                              
**                                 
**                                  
**--------------文件信息------------------------------------------------------------------------------------------
**文   件   名: SdSectServer.h
**创   建   人: 杨承凯(kady1984@163.com)
**创 建 日  期: 2008年04月19日
**最后修改日期: 2008年04月19日
**描        述: CF扇区服务函数
*****************************************************************************************************************/
#ifndef _SECT_SERV_H_
#define _SECT_SERV_H_

//编译控制========================================================================================================
//如果要使用FileSystem.c，请使能下面这个宏
#define _USE_FILE_SYSTEM_

//结构体定义======================================================================================================
//DPT(Disk PartitionTable)，即硬盘分区表结构定义
typedef struct
{
	BYTE BootIndicator;						//引导指示符，指明该分区是否为活动分区(0x80表示活动，0x00表示非活动)
	BYTE StartingHead;						//开始磁头
	BYTE StartingSector;					//开始扇区，只用了0-5位，后面的两位(第6位和第7位)被开始柱面字段所使用
	BYTE StartingCylinder;					//开始柱面，加上开始扇区的后两位，共10位
	BYTE SystemID;							//系统ID(System ID)，定义了分区的类型
	BYTE EndingHead;						//结束磁头
	BYTE EndingSector;						//结束扇区，只用了0-5位，后面的两位(第6位和第7位)被结束柱面字段所使用
	BYTE EndingCylinder;					//结束柱面，加上结束扇区的后两位，共10位
	unsigned long RelativeSectors;			//相对扇区数，从该磁盘的开始到该分区的开始(DBR的位置)的位移量，以扇区来计算
	unsigned long TotalSectors;				//总扇区数，该分区中的扇区总数
} CDpt;


//MBR区(master boot record)即主引导记录(有时也称主引导扇区)的结构定义
//MBR位于存储器的第一个扇区，总共512字节，前446字节(偏移0到偏移0x01BD)是引导程序；
//接下来的64字节(偏移0x01BE到偏移0x01FD)为DPT(Disk PartitionTable)，即硬盘分区表；
//最后两字节(偏移0x01FE到偏移0x01FF)为0x55和0xAA，是分区有效结束标志
typedef struct
{
	BYTE bootstrap[448];					//引导程序代码
	CDpt dpt[4];							//每个分区的描述
	BYTE signature[2]; 						//有效结束标志(必须为0x55和0xAA)
} CMbr;

//DBR区(DOS BOOT RECORD)即分区下的操作系统引导记录区的结构定义，通常占用分区的第0扇区共512个字节
typedef struct
{
	BYTE jmp[3];	 						//跳转指令
	char oem_name[8];			  			//厂商标志和os版本号
	
	//--------------------------------------//
	unsigned int bytes_per_sector;			//扇区的字节数，一般来说都是512字节(可以的值有512, 1024, 2048, 4096)
	BYTE sectors_per_cluster;				//每一簇的扇区个数(跟分区大小有关)
	unsigned int reserved_sectors;			//保留扇区数，即第一个文件分配表(FAT)开始之前的扇区数，包括引导扇区
	BYTE fat_copies;						//文件分配表(FAT)的个数(一般来说文件分配表有一个副本，所以此参数大多为2)
	unsigned int root_directory_entries;	//根目录项数(每项32字节，一般来说此字段为512)
	unsigned int number_of_sectors;			//该分区上的扇区个数
	BYTE media_descriptor;					//媒体描述符(描述这个存储器是什么类型，如硬盘、软盘、优盘等)
	unsigned int sectors_per_fat;			//每个文件分配表(FAT)的扇区个数(根据此数目、FAT个数和隐藏扇区数能计算根目录位置)
	unsigned int sectors_per_track;			//每磁道扇区数
	unsigned int heads;						//磁头数
	DWORD hidden_sectors;					//隐藏扇区数，指该分区上引导扇区之前的扇区数
	DWORD total_sectors;					//该分区上的扇区个数(如果前面的number_of_sectors为零，则使用此参数)
	//--------------------------------------//以上的12项称为BPB(BIOS Parameter Block)字段
	
	BYTE drive_number;						//物理驱动器号(只有当此设备是引导设备是，此字段有用)
	BYTE reserved;							//保留(一般设置为0)
	BYTE extended_signature; 				//扩展引导标签(必须为0x28或0x29)
	BYTE serial_number[4];					//卷标号，是格式化磁盘时所产生的一个随机序号，它有助于区分磁盘
	char volume_label[11];					//卷标，本字段只能使用一次，它被用来保存卷标号
	char filesystem[8]; 					//文件系统类型，这里我们用"FAT16"(可取的值有"FAT12","FAT16","FAT32")
	//--------------------------------------//以上的6项称为扩展BPB字段

	BYTE bootstrap[448];					//操作系统引导程序代码
	BYTE signature[2]; 						//有效结束标志(必须为0x55和0xAA)
} CDbr;

//裁减后的DBR结构(因为在SD卡上只会用到DBR的以下参数)
typedef struct
{
	BYTE valid;								//不是原DBR里边的，用来指示DBR的有效性
	BYTE fat_copies;						//文件分配表(FAT)的个数(一般来说文件分配表有一个副本，所以此参数大多为2)
	unsigned root_directory_entries;		//根目录项数(每项32字节，一般来说此字段为512)
	unsigned number_of_sectors;				//该分区上的扇区个数
	unsigned sectors_per_fat;				//每个文件分配表(FAT)的扇区个数(根据此数目、FAT个数和隐藏扇区数能计算根目录位置)
	DWORD total_sectors;					//该分区上的扇区个数(如果前面的number_of_sectors为零，则使用此参数)
	unsigned reserved_sectors;				//保留扇区数，即第一个文件分配表(FAT)开始之前的扇区数，包括引导扇区
	unsigned hidden_sectors;				//隐藏扇区数，指该分区上引导扇区之前的扇区数
	BYTE sectors_per_cluster;				//每一簇的扇区个数(跟分区大小有关)
} CDbrCompact;

//文件读写缓冲区
extern BYTE xdata Scratch[];

//SD卡一个扇区的字节数
#define SectBlockSize() ((unsigned int)PHYSICAL_BLOCK_SIZE)

//变量声明
extern BYTE xdata Scratch[PHYSICAL_BLOCK_SIZE]; 					//数据读写缓冲区 
extern CDbrCompact xdata MBR;										//主引导区结构


//函数声明========================================================================================================


/*****************************************************************************************************************
* 名	称：SectInit()
* 功	能：扇区初始化
* 入口参数：无
* 出口参数：无
* 说	明：在做其他任何文件操作之前，必须保证已调用了这个初始化函数
*****************************************************************************************************************/
void SectInit(void) reentrant;

/*****************************************************************************************************************
* 名	称：SectRead()
* 功	能：读取数据到缓冲区
* 入口参数：无
* 出口参数：无
* 说	明：无
*****************************************************************************************************************/
unsigned SectRead(unsigned long sector) reentrant;

/*****************************************************************************************************************
* 名	称：SectWrite()
* 功	能：将缓冲区数据写入扇区
* 入口参数：无
* 出口参数：无
* 说	明：无
*****************************************************************************************************************/
void SectWrite(unsigned long sector) reentrant;

/*****************************************************************************************************************
* 名	称：SectRootDir()
* 功	能：获取根目录
* 入口参数：无
* 出口参数：无
* 说	明：无
*****************************************************************************************************************/
unsigned SectRootDir(void) reentrant;

/*****************************************************************************************************************
* 名	称：SectRootDirLast()
* 功	能：获取根目录的最后一个扇区
* 入口参数：无
* 出口参数：无
* 说	明：无
*****************************************************************************************************************/
unsigned SectRootDirLast(void) reentrant;

/*****************************************************************************************************************
* 名	称：SectFileData()
* 功	能：文件数据开始的第一个扇区
* 入口参数：无
* 出口参数：无
* 说	明：无
*****************************************************************************************************************/
unsigned SectFileData(void) reentrant;

/*****************************************************************************************************************
* 名	称：SectFat1()
* 功	能：获取文件描述表1的第一个扇区
* 入口参数：无
* 出口参数：无
* 说	明：无
*****************************************************************************************************************/
unsigned SectFat1(void) reentrant;

/*****************************************************************************************************************
* 名	称：SectFat2()
* 功	能：获取文件描述表2的第一个扇区
* 入口参数：无
* 出口参数：无
* 说	明：无
*****************************************************************************************************************/
unsigned SectFat2(void) reentrant;

/*****************************************************************************************************************
* 名	称：SectWriteMultiFat()
* 功	能：写文件描述表
* 入口参数：无
* 出口参数：无
* 说	明：无
*****************************************************************************************************************/
void SectWriteMultiFat(unsigned long sector) reentrant;

/*****************************************************************************************************************
* 名	称：htonl()
* 功	能：四字节倒序
* 入口参数：无
* 出口参数：无
* 说	明：无
*****************************************************************************************************************/
DWORD htonl(DWORD d) reentrant;
#define ntohl htonl		//另一种形式

/*****************************************************************************************************************
* 名	称：htons()
* 功	能：双字节倒序
* 入口参数：无
* 出口参数：无
* 说	明：无
*****************************************************************************************************************/
unsigned htons(unsigned w) reentrant;
#define ntohs htons		//另一种形式

#endif
