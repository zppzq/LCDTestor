// KdUsbDemoDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "KdUsbDemo.h"
#include "KdUsbDemoDlg.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
END_MESSAGE_MAP()


// CKdUsbDemoDlg 对话框
CKdUsbDemoDlg::CKdUsbDemoDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CKdUsbDemoDlg::IDD, pParent)
	, m_strDataSend(_T(""))
	, m_strDataRecv(_T(""))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CKdUsbDemoDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_DATA_RECV, m_strDataRecv);
	DDX_Text(pDX, IDC_DATA_SEND, m_strDataSend);
}

BEGIN_MESSAGE_MAP(CKdUsbDemoDlg, CDialog)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDOK, &CKdUsbDemoDlg::OnBnClickedOk)
	ON_BN_CLICKED(IDC_SEND, &CKdUsbDemoDlg::OnBnClickedSend)
END_MESSAGE_MAP()


// CKdUsbDemoDlg 消息处理程序
BOOL CKdUsbDemoDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		CString strAboutMenu;
		strAboutMenu.LoadString(IDS_ABOUTBOX);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	// 执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	//通信初始化
	m_Usb.EnumDevices();
	m_Usb.Open();

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CKdUsbDemoDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

//	如果向对话框添加最小化按钮，则需要下面的代码
//	来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//	这将由框架自动完成。
void CKdUsbDemoDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标显示。
HCURSOR CKdUsbDemoDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

void CKdUsbDemoDlg::OnBnClickedOk()
{
	//打开端口
}

void CKdUsbDemoDlg::OnBnClickedSend()
{
	int nLen;						//数据长度
	char RecvBuff[200];				//接收缓冲区

	memset(RecvBuff, 0, 200);		//清除接收缓冲区

	UpdateData(TRUE);				//更新数据

	nLen = m_Usb.Send((char*)m_strDataSend.GetBuffer(), m_strDataSend.GetLength());		//发送数据
	nLen = m_Usb.Recvive(RecvBuff, m_strDataSend.GetLength());							//接收数据

	//显示数据
	m_strDataRecv.Format(_T("%s"), RecvBuff);
	UpdateData(FALSE);
}
